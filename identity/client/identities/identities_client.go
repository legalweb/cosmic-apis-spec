// Code generated by go-swagger; DO NOT EDIT.

package identities

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new identities API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for identities API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	AddOrganisationMember(params *AddOrganisationMemberParams, authInfo runtime.ClientAuthInfoWriter) (*AddOrganisationMemberOK, error)

	CreateAccount(params *CreateAccountParams, authInfo runtime.ClientAuthInfoWriter) (*CreateAccountOK, error)

	CreateOrganisation(params *CreateOrganisationParams, authInfo runtime.ClientAuthInfoWriter) (*CreateOrganisationOK, error)

	GetAccount(params *GetAccountParams, authInfo runtime.ClientAuthInfoWriter) (*GetAccountOK, error)

	GetOrganisation(params *GetOrganisationParams, authInfo runtime.ClientAuthInfoWriter) (*GetOrganisationOK, error)

	Login(params *LoginParams, authInfo runtime.ClientAuthInfoWriter) (*LoginOK, error)

	QueryAccountMemberships(params *QueryAccountMembershipsParams, authInfo runtime.ClientAuthInfoWriter) (*QueryAccountMembershipsOK, error)

	QueryAccounts(params *QueryAccountsParams, authInfo runtime.ClientAuthInfoWriter) (*QueryAccountsOK, error)

	QueryOrganisations(params *QueryOrganisationsParams, authInfo runtime.ClientAuthInfoWriter) (*QueryOrganisationsOK, error)

	RemoveOrganisationMember(params *RemoveOrganisationMemberParams, authInfo runtime.ClientAuthInfoWriter) (*RemoveOrganisationMemberOK, error)

	SetOrganisationStatus(params *SetOrganisationStatusParams, authInfo runtime.ClientAuthInfoWriter) (*SetOrganisationStatusOK, error)

	TokenCheck(params *TokenCheckParams, authInfo runtime.ClientAuthInfoWriter) (*TokenCheckOK, error)

	TokenRevoke(params *TokenRevokeParams, authInfo runtime.ClientAuthInfoWriter) (*TokenRevokeOK, error)

	UpdateAccountDetails(params *UpdateAccountDetailsParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateAccountDetailsOK, error)

	UpdateAccountPassword(params *UpdateAccountPasswordParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateAccountPasswordOK, error)

	UpdateOrganisation(params *UpdateOrganisationParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateOrganisationOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  AddOrganisationMember add organisation member API
*/
func (a *Client) AddOrganisationMember(params *AddOrganisationMemberParams, authInfo runtime.ClientAuthInfoWriter) (*AddOrganisationMemberOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddOrganisationMemberParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AddOrganisationMember",
		Method:             "POST",
		PathPattern:        "/v1/organisations/{organisation_id}/members",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddOrganisationMemberReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddOrganisationMemberOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for AddOrganisationMember: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateAccount create account API
*/
func (a *Client) CreateAccount(params *CreateAccountParams, authInfo runtime.ClientAuthInfoWriter) (*CreateAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateAccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateAccount",
		Method:             "POST",
		PathPattern:        "/v1/accounts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateAccountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateAccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateAccount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateOrganisation create organisation API
*/
func (a *Client) CreateOrganisation(params *CreateOrganisationParams, authInfo runtime.ClientAuthInfoWriter) (*CreateOrganisationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateOrganisationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateOrganisation",
		Method:             "POST",
		PathPattern:        "/v1/organisations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateOrganisationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateOrganisationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateOrganisation: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAccount get account API
*/
func (a *Client) GetAccount(params *GetAccountParams, authInfo runtime.ClientAuthInfoWriter) (*GetAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAccount",
		Method:             "GET",
		PathPattern:        "/v1/accounts/{account_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAccountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAccount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetOrganisation get organisation API
*/
func (a *Client) GetOrganisation(params *GetOrganisationParams, authInfo runtime.ClientAuthInfoWriter) (*GetOrganisationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrganisationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetOrganisation",
		Method:             "GET",
		PathPattern:        "/v1/organisations/{organisation_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOrganisationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOrganisationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetOrganisation: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  Login login API
*/
func (a *Client) Login(params *LoginParams, authInfo runtime.ClientAuthInfoWriter) (*LoginOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLoginParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Login",
		Method:             "POST",
		PathPattern:        "/v1/login",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &LoginReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LoginOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Login: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  QueryAccountMemberships query account memberships API
*/
func (a *Client) QueryAccountMemberships(params *QueryAccountMembershipsParams, authInfo runtime.ClientAuthInfoWriter) (*QueryAccountMembershipsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQueryAccountMembershipsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "QueryAccountMemberships",
		Method:             "GET",
		PathPattern:        "/v1/orgmemberships",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &QueryAccountMembershipsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*QueryAccountMembershipsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for QueryAccountMemberships: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  QueryAccounts query accounts API
*/
func (a *Client) QueryAccounts(params *QueryAccountsParams, authInfo runtime.ClientAuthInfoWriter) (*QueryAccountsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQueryAccountsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "QueryAccounts",
		Method:             "GET",
		PathPattern:        "/v1/accounts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &QueryAccountsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*QueryAccountsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for QueryAccounts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  QueryOrganisations query organisations API
*/
func (a *Client) QueryOrganisations(params *QueryOrganisationsParams, authInfo runtime.ClientAuthInfoWriter) (*QueryOrganisationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQueryOrganisationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "QueryOrganisations",
		Method:             "GET",
		PathPattern:        "/v1/organisations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &QueryOrganisationsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*QueryOrganisationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for QueryOrganisations: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RemoveOrganisationMember remove organisation member API
*/
func (a *Client) RemoveOrganisationMember(params *RemoveOrganisationMemberParams, authInfo runtime.ClientAuthInfoWriter) (*RemoveOrganisationMemberOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveOrganisationMemberParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RemoveOrganisationMember",
		Method:             "DELETE",
		PathPattern:        "/v1/organisations/{organisation_id}/members/{account_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RemoveOrganisationMemberReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RemoveOrganisationMemberOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RemoveOrganisationMember: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SetOrganisationStatus set organisation status API
*/
func (a *Client) SetOrganisationStatus(params *SetOrganisationStatusParams, authInfo runtime.ClientAuthInfoWriter) (*SetOrganisationStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetOrganisationStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SetOrganisationStatus",
		Method:             "POST",
		PathPattern:        "/v1/organisations/{organisation_id}/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetOrganisationStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetOrganisationStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SetOrganisationStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  TokenCheck token check API
*/
func (a *Client) TokenCheck(params *TokenCheckParams, authInfo runtime.ClientAuthInfoWriter) (*TokenCheckOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTokenCheckParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "TokenCheck",
		Method:             "POST",
		PathPattern:        "/v1/token/check",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TokenCheckReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TokenCheckOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for TokenCheck: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  TokenRevoke token revoke API
*/
func (a *Client) TokenRevoke(params *TokenRevokeParams, authInfo runtime.ClientAuthInfoWriter) (*TokenRevokeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTokenRevokeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "TokenRevoke",
		Method:             "POST",
		PathPattern:        "/v1/token/revoke",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TokenRevokeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TokenRevokeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for TokenRevoke: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateAccountDetails update account details API
*/
func (a *Client) UpdateAccountDetails(params *UpdateAccountDetailsParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateAccountDetailsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateAccountDetailsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UpdateAccountDetails",
		Method:             "POST",
		PathPattern:        "/v1/accounts/{account_id}/update_details",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateAccountDetailsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateAccountDetailsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateAccountDetails: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateAccountPassword update account password API
*/
func (a *Client) UpdateAccountPassword(params *UpdateAccountPasswordParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateAccountPasswordOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateAccountPasswordParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UpdateAccountPassword",
		Method:             "POST",
		PathPattern:        "/v1/accounts/{account_id}/change_password",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateAccountPasswordReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateAccountPasswordOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateAccountPassword: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateOrganisation update organisation API
*/
func (a *Client) UpdateOrganisation(params *UpdateOrganisationParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateOrganisationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateOrganisationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UpdateOrganisation",
		Method:             "POST",
		PathPattern:        "/v1/organisations/{organisation_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateOrganisationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateOrganisationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateOrganisation: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
