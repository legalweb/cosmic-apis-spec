// Code generated by go-swagger; DO NOT EDIT.

package identities

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewIdentitiesGetOrganisationParams creates a new IdentitiesGetOrganisationParams object
// with the default values initialized.
func NewIdentitiesGetOrganisationParams() *IdentitiesGetOrganisationParams {
	var ()
	return &IdentitiesGetOrganisationParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewIdentitiesGetOrganisationParamsWithTimeout creates a new IdentitiesGetOrganisationParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewIdentitiesGetOrganisationParamsWithTimeout(timeout time.Duration) *IdentitiesGetOrganisationParams {
	var ()
	return &IdentitiesGetOrganisationParams{

		timeout: timeout,
	}
}

// NewIdentitiesGetOrganisationParamsWithContext creates a new IdentitiesGetOrganisationParams object
// with the default values initialized, and the ability to set a context for a request
func NewIdentitiesGetOrganisationParamsWithContext(ctx context.Context) *IdentitiesGetOrganisationParams {
	var ()
	return &IdentitiesGetOrganisationParams{

		Context: ctx,
	}
}

// NewIdentitiesGetOrganisationParamsWithHTTPClient creates a new IdentitiesGetOrganisationParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewIdentitiesGetOrganisationParamsWithHTTPClient(client *http.Client) *IdentitiesGetOrganisationParams {
	var ()
	return &IdentitiesGetOrganisationParams{
		HTTPClient: client,
	}
}

/*IdentitiesGetOrganisationParams contains all the parameters to send to the API endpoint
for the identities get organisation operation typically these are written to a http.Request
*/
type IdentitiesGetOrganisationParams struct {

	/*OrganisationID*/
	OrganisationID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the identities get organisation params
func (o *IdentitiesGetOrganisationParams) WithTimeout(timeout time.Duration) *IdentitiesGetOrganisationParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the identities get organisation params
func (o *IdentitiesGetOrganisationParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the identities get organisation params
func (o *IdentitiesGetOrganisationParams) WithContext(ctx context.Context) *IdentitiesGetOrganisationParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the identities get organisation params
func (o *IdentitiesGetOrganisationParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the identities get organisation params
func (o *IdentitiesGetOrganisationParams) WithHTTPClient(client *http.Client) *IdentitiesGetOrganisationParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the identities get organisation params
func (o *IdentitiesGetOrganisationParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithOrganisationID adds the organisationID to the identities get organisation params
func (o *IdentitiesGetOrganisationParams) WithOrganisationID(organisationID string) *IdentitiesGetOrganisationParams {
	o.SetOrganisationID(organisationID)
	return o
}

// SetOrganisationID adds the organisationId to the identities get organisation params
func (o *IdentitiesGetOrganisationParams) SetOrganisationID(organisationID string) {
	o.OrganisationID = organisationID
}

// WriteToRequest writes these params to a swagger request
func (o *IdentitiesGetOrganisationParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param organisation_id
	if err := r.SetPathParam("organisation_id", o.OrganisationID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
