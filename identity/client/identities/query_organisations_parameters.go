// Code generated by go-swagger; DO NOT EDIT.

package identities

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewQueryOrganisationsParams creates a new QueryOrganisationsParams object
// with the default values initialized.
func NewQueryOrganisationsParams() *QueryOrganisationsParams {
	var ()
	return &QueryOrganisationsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewQueryOrganisationsParamsWithTimeout creates a new QueryOrganisationsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewQueryOrganisationsParamsWithTimeout(timeout time.Duration) *QueryOrganisationsParams {
	var ()
	return &QueryOrganisationsParams{

		timeout: timeout,
	}
}

// NewQueryOrganisationsParamsWithContext creates a new QueryOrganisationsParams object
// with the default values initialized, and the ability to set a context for a request
func NewQueryOrganisationsParamsWithContext(ctx context.Context) *QueryOrganisationsParams {
	var ()
	return &QueryOrganisationsParams{

		Context: ctx,
	}
}

// NewQueryOrganisationsParamsWithHTTPClient creates a new QueryOrganisationsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewQueryOrganisationsParamsWithHTTPClient(client *http.Client) *QueryOrganisationsParams {
	var ()
	return &QueryOrganisationsParams{
		HTTPClient: client,
	}
}

/*QueryOrganisationsParams contains all the parameters to send to the API endpoint
for the query organisations operation typically these are written to a http.Request
*/
type QueryOrganisationsParams struct {

	/*DisplayName*/
	DisplayName *string
	/*EmailAddress*/
	EmailAddress *string
	/*OrganisationID*/
	OrganisationID []string
	/*PaginationLimit*/
	PaginationLimit *int64
	/*PaginationPage*/
	PaginationPage *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the query organisations params
func (o *QueryOrganisationsParams) WithTimeout(timeout time.Duration) *QueryOrganisationsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the query organisations params
func (o *QueryOrganisationsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the query organisations params
func (o *QueryOrganisationsParams) WithContext(ctx context.Context) *QueryOrganisationsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the query organisations params
func (o *QueryOrganisationsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the query organisations params
func (o *QueryOrganisationsParams) WithHTTPClient(client *http.Client) *QueryOrganisationsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the query organisations params
func (o *QueryOrganisationsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDisplayName adds the displayName to the query organisations params
func (o *QueryOrganisationsParams) WithDisplayName(displayName *string) *QueryOrganisationsParams {
	o.SetDisplayName(displayName)
	return o
}

// SetDisplayName adds the displayName to the query organisations params
func (o *QueryOrganisationsParams) SetDisplayName(displayName *string) {
	o.DisplayName = displayName
}

// WithEmailAddress adds the emailAddress to the query organisations params
func (o *QueryOrganisationsParams) WithEmailAddress(emailAddress *string) *QueryOrganisationsParams {
	o.SetEmailAddress(emailAddress)
	return o
}

// SetEmailAddress adds the emailAddress to the query organisations params
func (o *QueryOrganisationsParams) SetEmailAddress(emailAddress *string) {
	o.EmailAddress = emailAddress
}

// WithOrganisationID adds the organisationID to the query organisations params
func (o *QueryOrganisationsParams) WithOrganisationID(organisationID []string) *QueryOrganisationsParams {
	o.SetOrganisationID(organisationID)
	return o
}

// SetOrganisationID adds the organisationId to the query organisations params
func (o *QueryOrganisationsParams) SetOrganisationID(organisationID []string) {
	o.OrganisationID = organisationID
}

// WithPaginationLimit adds the paginationLimit to the query organisations params
func (o *QueryOrganisationsParams) WithPaginationLimit(paginationLimit *int64) *QueryOrganisationsParams {
	o.SetPaginationLimit(paginationLimit)
	return o
}

// SetPaginationLimit adds the paginationLimit to the query organisations params
func (o *QueryOrganisationsParams) SetPaginationLimit(paginationLimit *int64) {
	o.PaginationLimit = paginationLimit
}

// WithPaginationPage adds the paginationPage to the query organisations params
func (o *QueryOrganisationsParams) WithPaginationPage(paginationPage *int64) *QueryOrganisationsParams {
	o.SetPaginationPage(paginationPage)
	return o
}

// SetPaginationPage adds the paginationPage to the query organisations params
func (o *QueryOrganisationsParams) SetPaginationPage(paginationPage *int64) {
	o.PaginationPage = paginationPage
}

// WriteToRequest writes these params to a swagger request
func (o *QueryOrganisationsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.DisplayName != nil {

		// query param display_name
		var qrDisplayName string
		if o.DisplayName != nil {
			qrDisplayName = *o.DisplayName
		}
		qDisplayName := qrDisplayName
		if qDisplayName != "" {
			if err := r.SetQueryParam("display_name", qDisplayName); err != nil {
				return err
			}
		}

	}

	if o.EmailAddress != nil {

		// query param email_address
		var qrEmailAddress string
		if o.EmailAddress != nil {
			qrEmailAddress = *o.EmailAddress
		}
		qEmailAddress := qrEmailAddress
		if qEmailAddress != "" {
			if err := r.SetQueryParam("email_address", qEmailAddress); err != nil {
				return err
			}
		}

	}

	valuesOrganisationID := o.OrganisationID

	joinedOrganisationID := swag.JoinByFormat(valuesOrganisationID, "multi")
	// query array param organisation_id
	if err := r.SetQueryParam("organisation_id", joinedOrganisationID...); err != nil {
		return err
	}

	if o.PaginationLimit != nil {

		// query param pagination.limit
		var qrPaginationLimit int64
		if o.PaginationLimit != nil {
			qrPaginationLimit = *o.PaginationLimit
		}
		qPaginationLimit := swag.FormatInt64(qrPaginationLimit)
		if qPaginationLimit != "" {
			if err := r.SetQueryParam("pagination.limit", qPaginationLimit); err != nil {
				return err
			}
		}

	}

	if o.PaginationPage != nil {

		// query param pagination.page
		var qrPaginationPage int64
		if o.PaginationPage != nil {
			qrPaginationPage = *o.PaginationPage
		}
		qPaginationPage := swag.FormatInt64(qrPaginationPage)
		if qPaginationPage != "" {
			if err := r.SetQueryParam("pagination.page", qPaginationPage); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
