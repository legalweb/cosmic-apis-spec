// Code generated by go-swagger; DO NOT EDIT.

package domain_config

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewResolveParams creates a new ResolveParams object
// with the default values initialized.
func NewResolveParams() *ResolveParams {
	var ()
	return &ResolveParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewResolveParamsWithTimeout creates a new ResolveParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewResolveParamsWithTimeout(timeout time.Duration) *ResolveParams {
	var ()
	return &ResolveParams{

		timeout: timeout,
	}
}

// NewResolveParamsWithContext creates a new ResolveParams object
// with the default values initialized, and the ability to set a context for a request
func NewResolveParamsWithContext(ctx context.Context) *ResolveParams {
	var ()
	return &ResolveParams{

		Context: ctx,
	}
}

// NewResolveParamsWithHTTPClient creates a new ResolveParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewResolveParamsWithHTTPClient(client *http.Client) *ResolveParams {
	var ()
	return &ResolveParams{
		HTTPClient: client,
	}
}

/*ResolveParams contains all the parameters to send to the API endpoint
for the resolve operation typically these are written to a http.Request
*/
type ResolveParams struct {

	/*DomainName*/
	DomainName string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the resolve params
func (o *ResolveParams) WithTimeout(timeout time.Duration) *ResolveParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the resolve params
func (o *ResolveParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the resolve params
func (o *ResolveParams) WithContext(ctx context.Context) *ResolveParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the resolve params
func (o *ResolveParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the resolve params
func (o *ResolveParams) WithHTTPClient(client *http.Client) *ResolveParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the resolve params
func (o *ResolveParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDomainName adds the domainName to the resolve params
func (o *ResolveParams) WithDomainName(domainName string) *ResolveParams {
	o.SetDomainName(domainName)
	return o
}

// SetDomainName adds the domainName to the resolve params
func (o *ResolveParams) SetDomainName(domainName string) {
	o.DomainName = domainName
}

// WriteToRequest writes these params to a swagger request
func (o *ResolveParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param domain_name
	if err := r.SetPathParam("domain_name", o.DomainName); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
