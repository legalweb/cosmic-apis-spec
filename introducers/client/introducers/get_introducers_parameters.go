// Code generated by go-swagger; DO NOT EDIT.

package introducers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetIntroducersParams creates a new GetIntroducersParams object
// with the default values initialized.
func NewGetIntroducersParams() *GetIntroducersParams {
	var ()
	return &GetIntroducersParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetIntroducersParamsWithTimeout creates a new GetIntroducersParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetIntroducersParamsWithTimeout(timeout time.Duration) *GetIntroducersParams {
	var ()
	return &GetIntroducersParams{

		timeout: timeout,
	}
}

// NewGetIntroducersParamsWithContext creates a new GetIntroducersParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetIntroducersParamsWithContext(ctx context.Context) *GetIntroducersParams {
	var ()
	return &GetIntroducersParams{

		Context: ctx,
	}
}

// NewGetIntroducersParamsWithHTTPClient creates a new GetIntroducersParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetIntroducersParamsWithHTTPClient(client *http.Client) *GetIntroducersParams {
	var ()
	return &GetIntroducersParams{
		HTTPClient: client,
	}
}

/*GetIntroducersParams contains all the parameters to send to the API endpoint
for the get introducers operation typically these are written to a http.Request
*/
type GetIntroducersParams struct {

	/*AccountID
	  You can specify one or many account IDs where the account ID must
	be within the owners of the introducer to match.

	*/
	AccountID []string
	/*IntroducerID
	  You can specify one or many introducer IDs to obtain.

	*/
	IntroducerID []string
	/*Name
	  You can search by name, this is search will see if the provided
	string can be found in any introducers name and returns the ones
	that matched, for example "mic" would still return "Cosmic".

	*/
	Name []string
	/*PaginationLimit*/
	PaginationLimit *int64
	/*PaginationPage*/
	PaginationPage *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get introducers params
func (o *GetIntroducersParams) WithTimeout(timeout time.Duration) *GetIntroducersParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get introducers params
func (o *GetIntroducersParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get introducers params
func (o *GetIntroducersParams) WithContext(ctx context.Context) *GetIntroducersParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get introducers params
func (o *GetIntroducersParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get introducers params
func (o *GetIntroducersParams) WithHTTPClient(client *http.Client) *GetIntroducersParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get introducers params
func (o *GetIntroducersParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAccountID adds the accountID to the get introducers params
func (o *GetIntroducersParams) WithAccountID(accountID []string) *GetIntroducersParams {
	o.SetAccountID(accountID)
	return o
}

// SetAccountID adds the accountId to the get introducers params
func (o *GetIntroducersParams) SetAccountID(accountID []string) {
	o.AccountID = accountID
}

// WithIntroducerID adds the introducerID to the get introducers params
func (o *GetIntroducersParams) WithIntroducerID(introducerID []string) *GetIntroducersParams {
	o.SetIntroducerID(introducerID)
	return o
}

// SetIntroducerID adds the introducerId to the get introducers params
func (o *GetIntroducersParams) SetIntroducerID(introducerID []string) {
	o.IntroducerID = introducerID
}

// WithName adds the name to the get introducers params
func (o *GetIntroducersParams) WithName(name []string) *GetIntroducersParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the get introducers params
func (o *GetIntroducersParams) SetName(name []string) {
	o.Name = name
}

// WithPaginationLimit adds the paginationLimit to the get introducers params
func (o *GetIntroducersParams) WithPaginationLimit(paginationLimit *int64) *GetIntroducersParams {
	o.SetPaginationLimit(paginationLimit)
	return o
}

// SetPaginationLimit adds the paginationLimit to the get introducers params
func (o *GetIntroducersParams) SetPaginationLimit(paginationLimit *int64) {
	o.PaginationLimit = paginationLimit
}

// WithPaginationPage adds the paginationPage to the get introducers params
func (o *GetIntroducersParams) WithPaginationPage(paginationPage *int64) *GetIntroducersParams {
	o.SetPaginationPage(paginationPage)
	return o
}

// SetPaginationPage adds the paginationPage to the get introducers params
func (o *GetIntroducersParams) SetPaginationPage(paginationPage *int64) {
	o.PaginationPage = paginationPage
}

// WriteToRequest writes these params to a swagger request
func (o *GetIntroducersParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	valuesAccountID := o.AccountID

	joinedAccountID := swag.JoinByFormat(valuesAccountID, "multi")
	// query array param account_id
	if err := r.SetQueryParam("account_id", joinedAccountID...); err != nil {
		return err
	}

	valuesIntroducerID := o.IntroducerID

	joinedIntroducerID := swag.JoinByFormat(valuesIntroducerID, "multi")
	// query array param introducer_id
	if err := r.SetQueryParam("introducer_id", joinedIntroducerID...); err != nil {
		return err
	}

	valuesName := o.Name

	joinedName := swag.JoinByFormat(valuesName, "multi")
	// query array param name
	if err := r.SetQueryParam("name", joinedName...); err != nil {
		return err
	}

	if o.PaginationLimit != nil {

		// query param pagination.limit
		var qrPaginationLimit int64
		if o.PaginationLimit != nil {
			qrPaginationLimit = *o.PaginationLimit
		}
		qPaginationLimit := swag.FormatInt64(qrPaginationLimit)
		if qPaginationLimit != "" {
			if err := r.SetQueryParam("pagination.limit", qPaginationLimit); err != nil {
				return err
			}
		}

	}

	if o.PaginationPage != nil {

		// query param pagination.page
		var qrPaginationPage int64
		if o.PaginationPage != nil {
			qrPaginationPage = *o.PaginationPage
		}
		qPaginationPage := swag.FormatInt64(qrPaginationPage)
		if qPaginationPage != "" {
			if err := r.SetQueryParam("pagination.page", qPaginationPage); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
