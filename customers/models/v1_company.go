// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1Company v1 company
// swagger:model v1Company
type V1Company struct {

	// If uploaded then a URL to the companies logo.
	AvatarURL string `json:"avatar_url,omitempty"`

	// The company number as registered at HMRC.
	CompanyNumber string `json:"company_number,omitempty"`

	// The type of company according to HMRC.
	CompanyType InternalwktCompanyType `json:"company_type,omitempty"`

	// director failures
	DirectorFailures int32 `json:"director_failures,omitempty"`

	// has payment failures
	HasPaymentFailures bool `json:"has_payment_failures,omitempty"`

	// has previous mortgage refusal
	HasPreviousMortgageRefusal bool `json:"has_previous_mortgage_refusal,omitempty"`

	// has received judgement for debt
	HasReceivedJudgementForDebt bool `json:"has_received_judgement_for_debt,omitempty"`

	// @OutputOnly
	ID string `json:"id,omitempty"`

	// is trading
	IsTrading bool `json:"is_trading,omitempty"`

	// The label of the company for example "Legalwebb UK Ltd"
	Label string `json:"label,omitempty"`

	// The full name of the company for example:
	// companies.cosmicapis.com/organisations/{organisationId}/companies/{companyId}
	Name string `json:"name,omitempty"`

	// notes
	Notes string `json:"notes,omitempty"`

	// number of employees
	NumberOfEmployees int32 `json:"number_of_employees,omitempty"`

	// A list of SIC code strings structured in the following way:
	// "6021:National Commercial Bank" "6022:State Commercial Bank"
	SicCodes []string `json:"sic_codes"`

	// Trading addresses.
	TradingAddress []*CompanyTradingAddress `json:"trading_address"`
}

// Validate validates this v1 company
func (m *V1Company) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCompanyType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTradingAddress(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1Company) validateCompanyType(formats strfmt.Registry) error {

	if swag.IsZero(m.CompanyType) { // not required
		return nil
	}

	if err := m.CompanyType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("company_type")
		}
		return err
	}

	return nil
}

func (m *V1Company) validateTradingAddress(formats strfmt.Registry) error {

	if swag.IsZero(m.TradingAddress) { // not required
		return nil
	}

	for i := 0; i < len(m.TradingAddress); i++ {
		if swag.IsZero(m.TradingAddress[i]) { // not required
			continue
		}

		if m.TradingAddress[i] != nil {
			if err := m.TradingAddress[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("trading_address" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1Company) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1Company) UnmarshalBinary(b []byte) error {
	var res V1Company
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
