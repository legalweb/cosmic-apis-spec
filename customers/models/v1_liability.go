// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1Liability v1 liability
// swagger:model v1Liability
type V1Liability struct {

	// lender name
	LenderName string `json:"lender_name,omitempty"`

	// What percentage of the liability is paid by this customer.
	OwnershipPercentage float32 `json:"ownership_percentage,omitempty"`

	// The full payment amount each month by all parties.
	TotalMonthlyRepayment *GoogletypeMoney `json:"total_monthly_repayment,omitempty"`

	// The total outstanding balance.
	TotalOutstandingBalance *GoogletypeMoney `json:"total_outstanding_balance,omitempty"`
}

// Validate validates this v1 liability
func (m *V1Liability) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTotalMonthlyRepayment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalOutstandingBalance(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1Liability) validateTotalMonthlyRepayment(formats strfmt.Registry) error {

	if swag.IsZero(m.TotalMonthlyRepayment) { // not required
		return nil
	}

	if m.TotalMonthlyRepayment != nil {
		if err := m.TotalMonthlyRepayment.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("total_monthly_repayment")
			}
			return err
		}
	}

	return nil
}

func (m *V1Liability) validateTotalOutstandingBalance(formats strfmt.Registry) error {

	if swag.IsZero(m.TotalOutstandingBalance) { // not required
		return nil
	}

	if m.TotalOutstandingBalance != nil {
		if err := m.TotalOutstandingBalance.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("total_outstanding_balance")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1Liability) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1Liability) UnmarshalBinary(b []byte) error {
	var res V1Liability
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
