// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1Ownership v1 ownership
// swagger:model v1Ownership
type V1Ownership struct {

	// asset
	Asset *Customersv1Asset `json:"asset,omitempty"`

	// Resource identifier for either of the following resources
	// that the ownership belongs to:
	// - customers.cosmicapis.com/Profile
	// - companies.cosmicapis.com/Company
	//
	// One full example:
	// - //customers.cosmicapis.com/organisations/STUB/profiles/00000000-0000-0000-0000-000000000000
	BelongsTo string `json:"belongs_to,omitempty"`

	// @OutputOnly
	ID string `json:"id,omitempty"`

	// liability
	Liability *V1Liability `json:"liability,omitempty"`

	// Name of the resource.
	// Example: compendia.cosmicapis.com/ownerships/{ownershipId}
	// @OutputOnly
	Name string `json:"name,omitempty"`
}

// Validate validates this v1 ownership
func (m *V1Ownership) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAsset(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLiability(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1Ownership) validateAsset(formats strfmt.Registry) error {

	if swag.IsZero(m.Asset) { // not required
		return nil
	}

	if m.Asset != nil {
		if err := m.Asset.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("asset")
			}
			return err
		}
	}

	return nil
}

func (m *V1Ownership) validateLiability(formats strfmt.Registry) error {

	if swag.IsZero(m.Liability) { // not required
		return nil
	}

	if m.Liability != nil {
		if err := m.Liability.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("liability")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1Ownership) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1Ownership) UnmarshalBinary(b []byte) error {
	var res V1Ownership
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
