// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1DocumentCollection v1 document collection
// swagger:model v1DocumentCollection
type V1DocumentCollection struct {

	// A list of application resource identifiers that requires this
	// collection to be filled.
	Applications []*V1DocumentCollectionApplicationLink `json:"applications"`

	// Resource identifier for either of the following resources:
	// - customers.cosmicapis.com/Profile
	// - companies.cosmicapis.com/Company
	//
	// One full example:
	// - //customers.cosmicapis.com/organisations/STUB/profiles/00000000-0000-0000-0000-000000000000
	AssignedTo string `json:"assigned_to,omitempty"`

	// documents
	Documents []*V1Document `json:"documents"`

	// @OutputOnly
	ID string `json:"id,omitempty"`

	// The label for the collection for example "Identification"
	Label string `json:"label,omitempty"`

	// metadata
	Metadata map[string]string `json:"metadata,omitempty"`

	// The full resource name.
	Name string `json:"name,omitempty"`
}

// Validate validates this v1 document collection
func (m *V1DocumentCollection) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApplications(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDocuments(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1DocumentCollection) validateApplications(formats strfmt.Registry) error {

	if swag.IsZero(m.Applications) { // not required
		return nil
	}

	for i := 0; i < len(m.Applications); i++ {
		if swag.IsZero(m.Applications[i]) { // not required
			continue
		}

		if m.Applications[i] != nil {
			if err := m.Applications[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("applications" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1DocumentCollection) validateDocuments(formats strfmt.Registry) error {

	if swag.IsZero(m.Documents) { // not required
		return nil
	}

	for i := 0; i < len(m.Documents); i++ {
		if swag.IsZero(m.Documents[i]) { // not required
			continue
		}

		if m.Documents[i] != nil {
			if err := m.Documents[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("documents" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1DocumentCollection) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1DocumentCollection) UnmarshalBinary(b []byte) error {
	var res V1DocumentCollection
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
