// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1Employment v1 employment
// swagger:model v1Employment
type V1Employment struct {

	// address
	Address *InternalwktAddress `json:"address,omitempty"`

	// average monthly bonus
	AverageMonthlyBonus *GoogletypeMoney `json:"average_monthly_bonus,omitempty"`

	// average monthly overtime
	AverageMonthlyOvertime *GoogletypeMoney `json:"average_monthly_overtime,omitempty"`

	// basic salary
	BasicSalary *GoogletypeMoney `json:"basic_salary,omitempty"`

	// employer
	Employer string `json:"employer,omitempty"`

	// gross income six months
	GrossIncomeSixMonths *GoogletypeMoney `json:"gross_income_six_months,omitempty"`

	// gross income three months
	GrossIncomeThreeMonths *GoogletypeMoney `json:"gross_income_three_months,omitempty"`

	// When updating this field is ignored and will use the
	// field from the UpdateEmploymentRequest.
	// @OutputOnly
	ID string `json:"id,omitempty"`

	// is zero hour contract
	IsZeroHourContract bool `json:"is_zero_hour_contract,omitempty"`

	// job title
	JobTitle string `json:"job_title,omitempty"`

	// start date
	StartDate *InternalwktDate `json:"start_date,omitempty"`

	// status
	Status V1EmploymentStatus `json:"status,omitempty"`
}

// Validate validates this v1 employment
func (m *V1Employment) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAverageMonthlyBonus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAverageMonthlyOvertime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBasicSalary(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGrossIncomeSixMonths(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGrossIncomeThreeMonths(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1Employment) validateAddress(formats strfmt.Registry) error {

	if swag.IsZero(m.Address) { // not required
		return nil
	}

	if m.Address != nil {
		if err := m.Address.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("address")
			}
			return err
		}
	}

	return nil
}

func (m *V1Employment) validateAverageMonthlyBonus(formats strfmt.Registry) error {

	if swag.IsZero(m.AverageMonthlyBonus) { // not required
		return nil
	}

	if m.AverageMonthlyBonus != nil {
		if err := m.AverageMonthlyBonus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("average_monthly_bonus")
			}
			return err
		}
	}

	return nil
}

func (m *V1Employment) validateAverageMonthlyOvertime(formats strfmt.Registry) error {

	if swag.IsZero(m.AverageMonthlyOvertime) { // not required
		return nil
	}

	if m.AverageMonthlyOvertime != nil {
		if err := m.AverageMonthlyOvertime.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("average_monthly_overtime")
			}
			return err
		}
	}

	return nil
}

func (m *V1Employment) validateBasicSalary(formats strfmt.Registry) error {

	if swag.IsZero(m.BasicSalary) { // not required
		return nil
	}

	if m.BasicSalary != nil {
		if err := m.BasicSalary.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("basic_salary")
			}
			return err
		}
	}

	return nil
}

func (m *V1Employment) validateGrossIncomeSixMonths(formats strfmt.Registry) error {

	if swag.IsZero(m.GrossIncomeSixMonths) { // not required
		return nil
	}

	if m.GrossIncomeSixMonths != nil {
		if err := m.GrossIncomeSixMonths.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gross_income_six_months")
			}
			return err
		}
	}

	return nil
}

func (m *V1Employment) validateGrossIncomeThreeMonths(formats strfmt.Registry) error {

	if swag.IsZero(m.GrossIncomeThreeMonths) { // not required
		return nil
	}

	if m.GrossIncomeThreeMonths != nil {
		if err := m.GrossIncomeThreeMonths.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gross_income_three_months")
			}
			return err
		}
	}

	return nil
}

func (m *V1Employment) validateStartDate(formats strfmt.Registry) error {

	if swag.IsZero(m.StartDate) { // not required
		return nil
	}

	if m.StartDate != nil {
		if err := m.StartDate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("start_date")
			}
			return err
		}
	}

	return nil
}

func (m *V1Employment) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if err := m.Status.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("status")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1Employment) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1Employment) UnmarshalBinary(b []byte) error {
	var res V1Employment
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
