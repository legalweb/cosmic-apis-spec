// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1Employment v1 employment
// swagger:model v1Employment
type V1Employment struct {

	// additional guaranteed income
	AdditionalGuaranteedIncome *GoogletypeMoney `json:"additional_guaranteed_income,omitempty"`

	// additional not guaranteed income
	AdditionalNotGuaranteedIncome *GoogletypeMoney `json:"additional_not_guaranteed_income,omitempty"`

	// address
	Address *InternalwktAddress `json:"address,omitempty"`

	// annual salary
	AnnualSalary *GoogletypeMoney `json:"annual_salary,omitempty"`

	// employer
	Employer string `json:"employer,omitempty"`

	// is on zero hour contract
	IsOnZeroHourContract bool `json:"is_on_zero_hour_contract,omitempty"`

	// job title
	JobTitle string `json:"job_title,omitempty"`

	// start date
	StartDate *InternalwktDate `json:"start_date,omitempty"`

	// status
	Status V1EmploymentStatus `json:"status,omitempty"`

	// zhc gross income last six months
	ZhcGrossIncomeLastSixMonths *GoogletypeMoney `json:"zhc_gross_income_last_six_months,omitempty"`

	// zhc gross income last three months
	ZhcGrossIncomeLastThreeMonths *GoogletypeMoney `json:"zhc_gross_income_last_three_months,omitempty"`
}

// Validate validates this v1 employment
func (m *V1Employment) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAdditionalGuaranteedIncome(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAdditionalNotGuaranteedIncome(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAnnualSalary(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateZhcGrossIncomeLastSixMonths(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateZhcGrossIncomeLastThreeMonths(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1Employment) validateAdditionalGuaranteedIncome(formats strfmt.Registry) error {

	if swag.IsZero(m.AdditionalGuaranteedIncome) { // not required
		return nil
	}

	if m.AdditionalGuaranteedIncome != nil {
		if err := m.AdditionalGuaranteedIncome.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("additional_guaranteed_income")
			}
			return err
		}
	}

	return nil
}

func (m *V1Employment) validateAdditionalNotGuaranteedIncome(formats strfmt.Registry) error {

	if swag.IsZero(m.AdditionalNotGuaranteedIncome) { // not required
		return nil
	}

	if m.AdditionalNotGuaranteedIncome != nil {
		if err := m.AdditionalNotGuaranteedIncome.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("additional_not_guaranteed_income")
			}
			return err
		}
	}

	return nil
}

func (m *V1Employment) validateAddress(formats strfmt.Registry) error {

	if swag.IsZero(m.Address) { // not required
		return nil
	}

	if m.Address != nil {
		if err := m.Address.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("address")
			}
			return err
		}
	}

	return nil
}

func (m *V1Employment) validateAnnualSalary(formats strfmt.Registry) error {

	if swag.IsZero(m.AnnualSalary) { // not required
		return nil
	}

	if m.AnnualSalary != nil {
		if err := m.AnnualSalary.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("annual_salary")
			}
			return err
		}
	}

	return nil
}

func (m *V1Employment) validateStartDate(formats strfmt.Registry) error {

	if swag.IsZero(m.StartDate) { // not required
		return nil
	}

	if m.StartDate != nil {
		if err := m.StartDate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("start_date")
			}
			return err
		}
	}

	return nil
}

func (m *V1Employment) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if err := m.Status.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("status")
		}
		return err
	}

	return nil
}

func (m *V1Employment) validateZhcGrossIncomeLastSixMonths(formats strfmt.Registry) error {

	if swag.IsZero(m.ZhcGrossIncomeLastSixMonths) { // not required
		return nil
	}

	if m.ZhcGrossIncomeLastSixMonths != nil {
		if err := m.ZhcGrossIncomeLastSixMonths.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("zhc_gross_income_last_six_months")
			}
			return err
		}
	}

	return nil
}

func (m *V1Employment) validateZhcGrossIncomeLastThreeMonths(formats strfmt.Registry) error {

	if swag.IsZero(m.ZhcGrossIncomeLastThreeMonths) { // not required
		return nil
	}

	if m.ZhcGrossIncomeLastThreeMonths != nil {
		if err := m.ZhcGrossIncomeLastThreeMonths.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("zhc_gross_income_last_three_months")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1Employment) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1Employment) UnmarshalBinary(b []byte) error {
	var res V1Employment
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
