// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CompanyTradingAddress company trading address
// swagger:model CompanyTradingAddress
type CompanyTradingAddress struct {

	// address
	Address *InternalwktAddress `json:"address,omitempty"`

	// is rented
	IsRented bool `json:"is_rented,omitempty"`

	// outstanding
	Outstanding *CosmicapisinternalwktMoney `json:"outstanding,omitempty"`

	// since
	Since *InternalwktDate `json:"since,omitempty"`

	// value
	Value *CosmicapisinternalwktMoney `json:"value,omitempty"`
}

// Validate validates this company trading address
func (m *CompanyTradingAddress) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOutstanding(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSince(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CompanyTradingAddress) validateAddress(formats strfmt.Registry) error {

	if swag.IsZero(m.Address) { // not required
		return nil
	}

	if m.Address != nil {
		if err := m.Address.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("address")
			}
			return err
		}
	}

	return nil
}

func (m *CompanyTradingAddress) validateOutstanding(formats strfmt.Registry) error {

	if swag.IsZero(m.Outstanding) { // not required
		return nil
	}

	if m.Outstanding != nil {
		if err := m.Outstanding.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("outstanding")
			}
			return err
		}
	}

	return nil
}

func (m *CompanyTradingAddress) validateSince(formats strfmt.Registry) error {

	if swag.IsZero(m.Since) { // not required
		return nil
	}

	if m.Since != nil {
		if err := m.Since.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("since")
			}
			return err
		}
	}

	return nil
}

func (m *CompanyTradingAddress) validateValue(formats strfmt.Registry) error {

	if swag.IsZero(m.Value) { // not required
		return nil
	}

	if m.Value != nil {
		if err := m.Value.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("value")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CompanyTradingAddress) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CompanyTradingAddress) UnmarshalBinary(b []byte) error {
	var res CompanyTradingAddress
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
