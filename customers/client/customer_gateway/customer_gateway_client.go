// Code generated by go-swagger; DO NOT EDIT.

package customer_gateway

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new customer gateway API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for customer gateway API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CustomerGatewayAddEmployment(params *CustomerGatewayAddEmploymentParams, authInfo runtime.ClientAuthInfoWriter) (*CustomerGatewayAddEmploymentOK, error)

	CustomerGatewayAddOwnership(params *CustomerGatewayAddOwnershipParams, authInfo runtime.ClientAuthInfoWriter) (*CustomerGatewayAddOwnershipOK, error)

	CustomerGatewayGetApplication(params *CustomerGatewayGetApplicationParams, authInfo runtime.ClientAuthInfoWriter) (*CustomerGatewayGetApplicationOK, error)

	CustomerGatewayGetNotifications(params *CustomerGatewayGetNotificationsParams, authInfo runtime.ClientAuthInfoWriter) (*CustomerGatewayGetNotificationsOK, error)

	CustomerGatewayGetSummary(params *CustomerGatewayGetSummaryParams, authInfo runtime.ClientAuthInfoWriter) (*CustomerGatewayGetSummaryOK, error)

	CustomerGatewayListApplications(params *CustomerGatewayListApplicationsParams, authInfo runtime.ClientAuthInfoWriter) (*CustomerGatewayListApplicationsOK, error)

	CustomerGatewayListEmployment(params *CustomerGatewayListEmploymentParams, authInfo runtime.ClientAuthInfoWriter) (*CustomerGatewayListEmploymentOK, error)

	CustomerGatewayListNotificationPreferences(params *CustomerGatewayListNotificationPreferencesParams, authInfo runtime.ClientAuthInfoWriter) (*CustomerGatewayListNotificationPreferencesOK, error)

	CustomerGatewayListOwnerships(params *CustomerGatewayListOwnershipsParams, authInfo runtime.ClientAuthInfoWriter) (*CustomerGatewayListOwnershipsOK, error)

	CustomerGatewayRemoveEmployment(params *CustomerGatewayRemoveEmploymentParams, authInfo runtime.ClientAuthInfoWriter) (*CustomerGatewayRemoveEmploymentOK, error)

	CustomerGatewayRemoveOwnership(params *CustomerGatewayRemoveOwnershipParams, authInfo runtime.ClientAuthInfoWriter) (*CustomerGatewayRemoveOwnershipOK, error)

	CustomerGatewaySetNotificationPreferences(params *CustomerGatewaySetNotificationPreferencesParams, authInfo runtime.ClientAuthInfoWriter) (*CustomerGatewaySetNotificationPreferencesOK, error)

	CustomerGatewayUpdateEmployment(params *CustomerGatewayUpdateEmploymentParams, authInfo runtime.ClientAuthInfoWriter) (*CustomerGatewayUpdateEmploymentOK, error)

	CustomerGatewayUpdateOwnership(params *CustomerGatewayUpdateOwnershipParams, authInfo runtime.ClientAuthInfoWriter) (*CustomerGatewayUpdateOwnershipOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CustomerGatewayAddEmployment customer gateway add employment API
*/
func (a *Client) CustomerGatewayAddEmployment(params *CustomerGatewayAddEmploymentParams, authInfo runtime.ClientAuthInfoWriter) (*CustomerGatewayAddEmploymentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerGatewayAddEmploymentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CustomerGateway_AddEmployment",
		Method:             "POST",
		PathPattern:        "/v1/employment",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CustomerGatewayAddEmploymentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerGatewayAddEmploymentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerGatewayAddEmploymentDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  CustomerGatewayAddOwnership customer gateway add ownership API
*/
func (a *Client) CustomerGatewayAddOwnership(params *CustomerGatewayAddOwnershipParams, authInfo runtime.ClientAuthInfoWriter) (*CustomerGatewayAddOwnershipOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerGatewayAddOwnershipParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CustomerGateway_AddOwnership",
		Method:             "POST",
		PathPattern:        "/v1/ownerships",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CustomerGatewayAddOwnershipReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerGatewayAddOwnershipOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerGatewayAddOwnershipDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  CustomerGatewayGetApplication customer gateway get application API
*/
func (a *Client) CustomerGatewayGetApplication(params *CustomerGatewayGetApplicationParams, authInfo runtime.ClientAuthInfoWriter) (*CustomerGatewayGetApplicationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerGatewayGetApplicationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CustomerGateway_GetApplication",
		Method:             "GET",
		PathPattern:        "/v1/applications/{app_type}/{app_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CustomerGatewayGetApplicationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerGatewayGetApplicationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerGatewayGetApplicationDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  CustomerGatewayGetNotifications customer gateway get notifications API
*/
func (a *Client) CustomerGatewayGetNotifications(params *CustomerGatewayGetNotificationsParams, authInfo runtime.ClientAuthInfoWriter) (*CustomerGatewayGetNotificationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerGatewayGetNotificationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CustomerGateway_GetNotifications",
		Method:             "GET",
		PathPattern:        "/v1/notifications",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CustomerGatewayGetNotificationsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerGatewayGetNotificationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerGatewayGetNotificationsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  CustomerGatewayGetSummary customer gateway get summary API
*/
func (a *Client) CustomerGatewayGetSummary(params *CustomerGatewayGetSummaryParams, authInfo runtime.ClientAuthInfoWriter) (*CustomerGatewayGetSummaryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerGatewayGetSummaryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CustomerGateway_GetSummary",
		Method:             "GET",
		PathPattern:        "/v1/summary",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CustomerGatewayGetSummaryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerGatewayGetSummaryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerGatewayGetSummaryDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  CustomerGatewayListApplications customer gateway list applications API
*/
func (a *Client) CustomerGatewayListApplications(params *CustomerGatewayListApplicationsParams, authInfo runtime.ClientAuthInfoWriter) (*CustomerGatewayListApplicationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerGatewayListApplicationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CustomerGateway_ListApplications",
		Method:             "GET",
		PathPattern:        "/v1/applications",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CustomerGatewayListApplicationsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerGatewayListApplicationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerGatewayListApplicationsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  CustomerGatewayListEmployment customer gateway list employment API
*/
func (a *Client) CustomerGatewayListEmployment(params *CustomerGatewayListEmploymentParams, authInfo runtime.ClientAuthInfoWriter) (*CustomerGatewayListEmploymentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerGatewayListEmploymentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CustomerGateway_ListEmployment",
		Method:             "GET",
		PathPattern:        "/v1/employment",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CustomerGatewayListEmploymentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerGatewayListEmploymentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerGatewayListEmploymentDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  CustomerGatewayListNotificationPreferences customer gateway list notification preferences API
*/
func (a *Client) CustomerGatewayListNotificationPreferences(params *CustomerGatewayListNotificationPreferencesParams, authInfo runtime.ClientAuthInfoWriter) (*CustomerGatewayListNotificationPreferencesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerGatewayListNotificationPreferencesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CustomerGateway_ListNotificationPreferences",
		Method:             "GET",
		PathPattern:        "/v1/settings/notifications",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CustomerGatewayListNotificationPreferencesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerGatewayListNotificationPreferencesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerGatewayListNotificationPreferencesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  CustomerGatewayListOwnerships customer gateway list ownerships API
*/
func (a *Client) CustomerGatewayListOwnerships(params *CustomerGatewayListOwnershipsParams, authInfo runtime.ClientAuthInfoWriter) (*CustomerGatewayListOwnershipsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerGatewayListOwnershipsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CustomerGateway_ListOwnerships",
		Method:             "GET",
		PathPattern:        "/v1/ownerships",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CustomerGatewayListOwnershipsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerGatewayListOwnershipsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerGatewayListOwnershipsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  CustomerGatewayRemoveEmployment customer gateway remove employment API
*/
func (a *Client) CustomerGatewayRemoveEmployment(params *CustomerGatewayRemoveEmploymentParams, authInfo runtime.ClientAuthInfoWriter) (*CustomerGatewayRemoveEmploymentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerGatewayRemoveEmploymentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CustomerGateway_RemoveEmployment",
		Method:             "DELETE",
		PathPattern:        "/v1/employment/{employment_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CustomerGatewayRemoveEmploymentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerGatewayRemoveEmploymentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerGatewayRemoveEmploymentDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  CustomerGatewayRemoveOwnership customer gateway remove ownership API
*/
func (a *Client) CustomerGatewayRemoveOwnership(params *CustomerGatewayRemoveOwnershipParams, authInfo runtime.ClientAuthInfoWriter) (*CustomerGatewayRemoveOwnershipOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerGatewayRemoveOwnershipParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CustomerGateway_RemoveOwnership",
		Method:             "DELETE",
		PathPattern:        "/v1/ownerships/{ownership_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CustomerGatewayRemoveOwnershipReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerGatewayRemoveOwnershipOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerGatewayRemoveOwnershipDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  CustomerGatewaySetNotificationPreferences merges the notification preferences which are currently available with the preferences provided in set notification preferences request
*/
func (a *Client) CustomerGatewaySetNotificationPreferences(params *CustomerGatewaySetNotificationPreferencesParams, authInfo runtime.ClientAuthInfoWriter) (*CustomerGatewaySetNotificationPreferencesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerGatewaySetNotificationPreferencesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CustomerGateway_SetNotificationPreferences",
		Method:             "POST",
		PathPattern:        "/v1/settings/notifications",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CustomerGatewaySetNotificationPreferencesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerGatewaySetNotificationPreferencesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerGatewaySetNotificationPreferencesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  CustomerGatewayUpdateEmployment customer gateway update employment API
*/
func (a *Client) CustomerGatewayUpdateEmployment(params *CustomerGatewayUpdateEmploymentParams, authInfo runtime.ClientAuthInfoWriter) (*CustomerGatewayUpdateEmploymentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerGatewayUpdateEmploymentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CustomerGateway_UpdateEmployment",
		Method:             "PUT",
		PathPattern:        "/v1/employment/{employment_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CustomerGatewayUpdateEmploymentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerGatewayUpdateEmploymentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerGatewayUpdateEmploymentDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  CustomerGatewayUpdateOwnership customer gateway update ownership API
*/
func (a *Client) CustomerGatewayUpdateOwnership(params *CustomerGatewayUpdateOwnershipParams, authInfo runtime.ClientAuthInfoWriter) (*CustomerGatewayUpdateOwnershipOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerGatewayUpdateOwnershipParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CustomerGateway_UpdateOwnership",
		Method:             "PUT",
		PathPattern:        "/v1/ownerships/{ownership_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CustomerGatewayUpdateOwnershipReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerGatewayUpdateOwnershipOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CustomerGatewayUpdateOwnershipDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
